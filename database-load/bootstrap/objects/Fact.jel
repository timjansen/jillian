/**
 * A Fact declares a bit of information about a database entry's property. It doesn't always have to be true, but could be a guess or a theory. It also doesn't have to be a single value, but could be a range of possible values, or a list of possibilities.
 * Facts can be computed, and it is even possible to have a mere AssertionFact that just checks whether some value is possible as property value or not.
 * Every fact can be limited to be valid only in a certain time or reality.
 */
abstract class Fact
  /**
   * Defines how good the fact type is specifying the fact value. A ValueFact would be a 1, while a ValueRangeFact is less specific and a AssertionFact even less.
   */
  factTypeSpecificness: number(0...1)

  /**
   * Defines whether the fact describes all possible values or just some, and whether the fact contains positives or negatives.
   */
  coverage: EnumType('FactCoverageEnum')
  
  /**
   * The owning object of this fact
   */
  owner: thing
  
  /**
   * The transcript that created this Fact.
   */
  transcript: @TranscriptCategory
  
  /**
   * The sentence number(s) in the transcript that created this fact.
   */
  transscriptSentence: int<>
  
  /**
   * Who created this Fact? Not always the actual source of the information, but rather who fed it into the database.
   * The source can be found in the transcript.
   */
  creator: thing
  
  /**
   * Describes the kind of Fact (whether it is the definition of the property, a sample, a calculated value...)
   */
  type: FactTypeEnum
  
  /**
   * Rates the trustworthyness of the information on a scale from 0 (lowest) to 100 (highest). This will eventually be a computed value
   * based on transcript and other factors.
   */ 
  trustLevel: number(0...100)        // 100 is fact by root, estimate would be 10... 
  
  /**
   * The time when the property value described by this Fact becomes true. This is used for values that can change over time, like the size of a human being.
   */
  startTime: time?           // the time the Fact starts to become true

  /**
   * The time when the property value described by this Fact ends to be true.
   */
  endTime: time?             // the time the Fact ends, exclusive

  /**
   * A precondition for the fact to be true. Something like 'children grow, but only until the age of 18' could be added here as 'age=>age<18'...
   */
  precondition: function?

  /**
   * A list of properties that must be available in the object in order to get a result.
   */
  get dependencies(): Set => if this.precondition then Set(this.precondition.getArguments().map(t=>t.name)) else Set.empty

  /**
   * Returns true if the fact's value is inverted, thus it contains impossible values instead of possible values.
   */
  get negative(): bool => this.coverage == FactCoverageEnum.COMPLETE_NEGATIVES || this.coverage == FactCoverageEnum.SOME_NEGATIVES

  /**
   * Returns true if the fact covers all possible values, false if not.
   */
  get complete(): bool => this.coverage == FactCoverageEnum.COMPLETE || this.coverage == FactCoverageEnum.COMPLETE_NEGATIVES

  /**
   * Checks whether the given value for the property is either the same value or compatible with the fact's value. It can return either true or false, if the fact provides enough
   * information, or null if the fact does not have enough information.
   * It must use the 'coverage' value to make that decision. 
   * @param v the value to check
   * @param dependencies the resolved values for the declared dependencies
   * @return true if the value is compatible, false if known to be incompatible, null if unknown
   */
  checkValue(v: any?, dependencies: any{} = {}): bool? =>
    let r = this.matchesValue(v, dependencies):
      if this.coverage == FactCoverageEnum.COMPLETE then
        r
      if this.coverage == FactCoverageEnum.COMPLETE_NEGATIVES then
        !r
      if this.coverage == FactCoverageEnum.SOME_POSITIVES then
        r || null
      else // SOME_NEGATIVES
        if r then false else null

  /**
   * Checks whether the given value matches the value represented by the fact. Ignores 'coverage'.
   * @param v the value to check
   * @param dependencies the resolved values for the declared dependencies
   * @return true if the value is included, false otherwise
   */
  abstract matchesValue(v: any?, dependencies: any{} = {}): bool


  /**
   * Retrieves the value of the fact, if possible, given the dependencies. May be a Range or Distribution if that's the best way to describe the fact.
   * @param dependencies the resolved values for the declared dependencies
   * @return if a value is available (e.g. this is not an assumption fact), the computed or stored value.
   */
  abstract getValue(dependencies: any{} = {}): any?
  
  /**
   * Retrieves the single non-range, non-List, non-Distribution value of the fact, if possible, given the dependencies and the fact type.
   * @param dependencies the resolved values for the declared dependencies
   * @return if a value is available (e.g. this is not an assumption or a range fact), the computed or stored value.
   */
  abstract getDiscreteValue(dependencies: any{} = {}): any?
  
  /**
   * Checks whether this fact allows the given other fact to be true, and thus does not contradict it. For example, an assertion fact allows all facts that fulfill the assertion.
   * This is a best effort function. It won't be able, for example, find out whether two assertions contradict each other.
   */
  abstract allows(thisDependencies: any{}, other: Fact, otherDependencies: any{}): bool
  
  
  