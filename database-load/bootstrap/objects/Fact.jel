/**
 * A Fact declares a bit of information about a database entry's property. It doesn't always have to be true, but could be a guess or a theory. It also doesn't have to be a single value, but could be a range of possible values, or a list of possibilities.
 * Facts can be computed, and it is even possible to have a mere AssertionFact that just checks whether some value is possible as property value or not.
 * Every fact can be limited to be valid only in a certain time or reality.
 */
abstract class Fact
  /**
   * Defines how good the fact type is specifying the fact value. A ValueFact would be a 1, while a ValueRangeFact is less specific and a AssertionFact even less.
   */
  factTypeSpecificness: number(0...1)

  /**
   * If true, the values represented by this fact are comprehensive. If false, other values are possible.
   * This is mostly useful for Facts in categories, where a fact can be different for different instances of the category. 
   * A fact like "X can only be A, B or C" would be a complete fact. But "X can be A, B or C" does exclude the existance of other values, and thus would not be complete.
   */
  comprehensive: bool
  
  /**
   * If true, the fact is inverted and specifies a value that is not true.
   */
  negative: bool

  /**
   * The owning object of this fact
   */
  owner: thing
  
  /**
   * The transcript that created this Fact.
   */
  transcript: @TranscriptCategory
  
  /**
   * The sentence number(s) in the transcript that created this fact.
   */
  transscriptSentence: int<>
  
  /**
   * Who created this Fact? Not always the actual source of the information, but rather who fed it into the database.
   * The source can be found in the transcript.
   */
  creator: thing
  
  /**
   * Describes the kind of Fact (whether it is the definition of the property, a sample, a calculated value...)
   */
  type: FactTypeEnum
  
  /**
   * Rates the trustworthyness of the information on a scale from 0 (lowest) to 100 (highest). This will eventually be a computed value
   * based on transcript and other factors.
   */ 
  trustLevel: number(0...100)        // 100 is fact by root, estimate would be 10... 
  
  /**
   * The time when the property value described by this Fact becomes true. This is used for values that can change over time, like the size of a human being.
   */
  startTime: time?           // the time the Fact starts to become true

  /**
   * The time when the property value described by this Fact ends to be true.
   */
  endTime: time?             // the time the Fact ends, exclusive

  /**
   * A precondition for the fact to be true. Something like 'children grow, but only until the age of 18' could be added here as 'age=>age<18'...
   */
  precondition: function?

  /**
   * A list of properties that must be available in the object in order to get a result.
   */
  get dependencies(): Set => if this.precondition then Set(this.precondition.getArguments().map(t=>t.name)) else Set.empty

  /**
   * Checks whether the given value for the property is either the same value or compatible with the fact's value.
   * Please note that checkValue() does not consider the 'negative' property!
   * @param v the value to check
   * @param dependencies the resolved values for the declared dependencies
   * @return true if the value is compatible, false if known to the incompatible, null if unknown
   */
  abstract checkValue(v: any?, dependencies: any{} = {}): bool

  /**
   * Retrieves the value of the fact, if possible, given the dependencies. May be a Range or Distribution if that's the best way to describe the fact.
   * @param dependencies the resolved values for the declared dependencies
   * @return if a value is available (e.g. this is not an assumption fact), the computed or stored value.
   */
  abstract getValue(dependencies: any{} = {}): any?
  
  /**
   * Retrieves the single non-range, non-List, non-Distribution value of the fact, if possible, given the dependencies and the fact type.
   * @param dependencies the resolved values for the declared dependencies
   * @return if a value is available (e.g. this is not an assumption or a range fact), the computed or stored value.
   */
  abstract getDiscreteValue(dependencies: any{} = {}): any?
  
  /**
   * Checks whether this fact allows the given other fact to be true, and thus does not contradict it. For example, an assertion fact allows all facts that fulfill the assertion.
   * This is a best effort function. It won't be able, for example, find out whether two assertions contradict each other.
   */
  abstract allows(thisDependencies: any{}, other: Fact, otherDependencies: any{}): bool
  