/**
 * CalculatedFact is a Fact that computes a value from other properties.
 * A calculated fact may have arguments which must correspond to other property names of the same database entry. They need to be declared in the dependencies property.
 * In addition to the Thing's facts, the following argument names are also supported and will be provided if included:
 *  - currentTime: the time for which the assertion should be validated, as timestamp
 *  - currentDate: the date/time for which the assertion should be validated, as ZonedDateTime
 *  - currentLocation: the current location which is being validated, as Geo::ElevatedPosition
 */
class CalculatedFact extends FunctionFact

  /**
   * The function to calculate the fact. See above for description of possible arguments.
   */
  constructor(func, coverage, owner, transcript, transscriptSentence, creator, type, trustLevel, startTime, endTime, precondition) =>
  {
    factTypeSpecificness: if coverage == FactCoverageEnum.COMPLETE || coverage == FactCoverageEnum.COMPLETE_NEGATIVES then 1 
                          if coverage == FactCoverageEnum.SOME_NEGATIVES then 0.1
                          else 0.5
  }

  override matchesValue(v: any?, dependencies: any{} = {}): bool => this.func.call(dependencies) == v
  
  override getValue(dependencies: any{} = {}): any? => this.func.call(dependencies)
  
  override getDiscreteValue(dependencies: any{} = {}): any? => this.getValue(dependencies)
  
  override allows(thisDependencies: any{} = {}, other: Fact, otherDependencies: any{} = {}): bool => true
