/**
 * A Fact that offers a range of possible values instead of the single correct value. Any of the values in the range can be the actual value.
 */
 class ValueRangeFact extends Fact

  /**
   * @param values The range of possible values.
   * @param step if set, the step relative to the Range min or, if min==null, max. Only those values with the step are valid. Most common will be a step value of 1, to allow only integers.
   */
  constructor(values: Range, step: number?, coverage, owner, transcript, transscriptSentence, creator, type, trustLevel, startTime, endTime, precondition) =>
  {
    factTypeSpecificness: if coverage == FactCoverageEnum.COMPLETE || coverage == FactCoverageEnum.COMPLETE_NEGATIVES then 0.6
                          if coverage == FactCoverageEnum.SOME_NEGATIVES then 0.2
                          else 0.3

  }

  override matchesValue(v: any?, dependencies: any{} = {}): bool =>
    v in this.values && if this.step then (
      if this.values.min != null then ((v - this.values.min) / this.step).isInteger()
      if this.values.max != null then ((this.values.max - v) / this.step).isInteger()
    )
    
  override getValue(dependencies: any{} = {}): any? => this.values
  
  override getDiscreteValue(dependencies: any{} = {}): any? => if this.values.min == this.values.max then this.values.min else null
  
  override allows(thisDependencies: any{} = {}, other: Fact, otherDependencies: any{} = {}): bool => true
