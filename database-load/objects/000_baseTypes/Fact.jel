/**
 * A Fact declares a bit of information about a database entry's property. It doesn't always have to be true, but could be a guess or a theory. It also doesn't have to be a single value, but could be a range of possible values, or a list of possibilities.
 * Facts can be computed, and it is even possible to have a mere AssertionFact that just checks whether some value is possible as property value or not.
 * Every fact can be limited to be valid only in a certain time or reality.
 */
abstract class Fact
  /**
   * The owning object of this fact
   */
  owner: any//dbEntry
  
  /**
   * The transcript that created this Fact.
   */
  transcript: @TranscriptCategory
  
  /**
   * The sentence number(s) in the transcript that created this fact.
   */
  transscriptSentence: int<>
  
  /**
   * Who created this Fact? Not always the actual source the information, but rather who fed it into the database.
   * The source can be found in the transcript.
   */
  creator: any//dbEntry
  
  /**
   * Describes the kind of Fact (whether it is the definition of the property, a sample, a calculated value...)
   */
  type: FactTypeEnum
  
  /**
   * Rates the trustworthyness of the information on a scale from 0 (lowest) to 100 (highest). This will eventually be a computed value
   * based on transcript and other factors.
   */ 
  trustLevel: 0...100        // 100 is fact by root, estimate would be 10... 
  
  /**
   * The reality on which the property is based. This allows different properties in different realities.
   */
  reality: @RealityCategory?
  
  /**
   * The time when the property value described by this Fact becomes true. This is used for values that can change over time, like the size of a human being.
   */
  startTime: time?           // the time the Fact starts to become true

  /**
   * The time when the property value described by this Fact ends to be true.
   */
  endTime: time?             // the time the Fact ends

  /**
   * Checks whether the given value for the property is either the same value or compatible with the fact's value.
   * @param v the value to check
   * @return true if the value is compatible, false otherwise
   */
  abstract checkValue(v: any): bool

