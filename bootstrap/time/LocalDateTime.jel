/**
 * Describes a simple date time, year/month/date hour/minute/seconds, without timezone. Minute and seconds, so it can also describe a whole hour or minute.
 */
native class LocalDateTime extends AbstractDate:

  
  native constructor(year, month, day, hour: int, minute: int?, seconds: number?)
  static native fromDate(date: LocalDate, time: TimeOfDay)


	override native getStartTime(defaultTimeZone: SimpleType('TimeZone')): Timestamp
	override native getEndTime(defaultTimeZone: SimpleType('TimeZone')): Timestamp
	override native isContinous(): bool

	
	override native isBefore(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool
	override native isAfter(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool

  override native contains(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool
  
  
	
	native toZonedDate(timeZone: TimeZone): SimpleType('ZonedDate')

	native toZonedDateTime(timeZone: TimeZone): SimpleType('ZonedDateTime')

	native toTimestamp(timeZone: TimeZone): Timestamp

  override native leapYear
  override native numberOfDays
  override native dayOfYear
  override native dayOfWeek
	override native isoWeek
	override native isoWeeksInYear
	override native quarter
	override native century
	override native millenium
  override native allDays
	override native diff(otherDate: AbstractDate, type: string | SimpleType('DbRef')): SimpleType('UnitValue')
	

  

  
  
  

  
  