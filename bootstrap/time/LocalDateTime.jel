/**
 * Describes a simple date time, year/month/date hour/minute/seconds, without timezone. Minute and seconds, so it can also describe a whole hour or minute.
 */
native class LocalDateTime extends AbstractDate:

  
  native constructor(year, month, day, hour: int, minute: int?, seconds: number?)
  static native fromDate(date: LocalDate, time: TimeOfDay)


	override native getStartTime(defaultTimeZone: SimpleType('TimeZone')): Timestamp
	override native getEndTime(defaultTimeZone: SimpleType('TimeZone')): Timestamp
	override native isContinous(): bool

	
	override native isBefore(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool
	override native isAfter(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool

  override native contains(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool
  
  
	
	native toZonedDate(timeZone: TimeZone): SimpleType('ZonedDate')

	native toZonedDateTime(timeZone: TimeZone): SimpleType('ZonedDateTime')

	native toTimestamp(timeZone: TimeZone): Timestamp

 
  override native leapYear: bool
  override native numberOfDays: SimpleType('UnitValue')
  override native dayOfYear: int
  override native dayOfWeek: int
	override native isoWeek: int
	override native isoWeeksInYear: int
	override native quarter: int
	override native century: int
	override native millenium: int
  override native allDays: AbstractDate[]
	override native diff(otherDate: AbstractDate, type: string | SimpleType('DbRef')): SimpleType('UnitValue')
	

  

  
  