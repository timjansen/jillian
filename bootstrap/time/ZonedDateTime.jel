/**
 * Describes a date with timezone and without time.
 */
native class ZonedDateTime extends AbstractDate:
  
  native constructor(timeZone: TimeZone, year, month, day, hour: int, minute: int?, seconds: int?, milliseconds: int?)
	static native fromLocalDate(timeZone: TimeZone, date: LocalDate, time: TimeOfDay): ZonedDateTime
  static native fromZonedDate(zonedDate: ZonedDate, time: TimeOfDay): ZonedDateTime
  
	native toZonedDate(): SimpleType('ZonedDate')
	native toLocalDateTime(): LocalDateTime
	native toTimestamp(): Timestamp
	native toUTC(): ZonedDateTime
	native withTimeZone(timeZone: TimeZone): ZonedDateTime


	override native getStartTime(defaultTimeZone: SimpleType('TimeZone')): Timestamp
	override native getEndTime(defaultTimeZone: SimpleType('TimeZone')): Timestamp
	override native isContinous(): bool

	
	override native isBefore(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool
	override native isAfter(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool

  override native contains(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool
  

  override native leapYear
  override native numberOfDays
  override native dayOfYear
  override native dayOfWeek
	override native isoWeek
	override native isoWeeksInYear
	override native quarter
	override native century
	override native millenium
  override native allDays
	override native diff(otherDate: AbstractDate, type: string | SimpleType('DbRef')): SimpleType('UnitValue')
	

  

  
  
