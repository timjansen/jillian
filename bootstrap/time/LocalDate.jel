/**
 * Describes a simple date, year/month/date, without timezone. Month and day are optional, so it can also describe a whole month or year.
 */
native class LocalDate extends AbstractDate:

  native constructor(year, month, day)

	native toLocalDateTime(time: TimeOfDay = TimeOfDay.MIDNIGHT): LocalDateTime
	native toZonedDate(timeZone: SimpleType('TimeZone')): SimpleType('ZonedDate')
	native toZonedDateTime(timeZone: SimpleType('TimeZone'), time: TimeOfDay = TimeOfDay.MIDNIGHT): SimpleType('ZonedDateTime')
  
	override native getStartTime(defaultTimeZone: SimpleType('TimeZone')): Timestamp
	override native getEndTime(defaultTimeZone: SimpleType('TimeZone')): Timestamp
	override native isContinous(): bool

	
	override native isBefore(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool
	override native isAfter(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool

  override native contains(time: Timestamp, defaultTimeZone: SimpleType('TimeZone')): bool
  
  

  override native leapYear
  override native numberOfDays
  override native dayOfYear
  override native dayOfWeek
	override native isoWeek
	override native isoWeeksInYear
	override native quarter
	override native century
	override native millenium
  override native allDays
	override native diff(otherDate: AbstractDate, type: string | SimpleType('DbRef')): SimpleType('UnitValue')
	

  

  
  